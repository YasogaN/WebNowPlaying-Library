# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _wnp
else:
    import _wnp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


WNP_MAX_PLAYERS = _wnp.WNP_MAX_PLAYERS
WNP_STATE_PLAYING = _wnp.WNP_STATE_PLAYING
WNP_STATE_PAUSED = _wnp.WNP_STATE_PAUSED
WNP_STATE_STOPPED = _wnp.WNP_STATE_STOPPED
WNP_REPEAT_NONE = _wnp.WNP_REPEAT_NONE
WNP_REPEAT_ALL = _wnp.WNP_REPEAT_ALL
WNP_REPEAT_ONE = _wnp.WNP_REPEAT_ONE
WNP_RATING_SYSTEM_NONE = _wnp.WNP_RATING_SYSTEM_NONE
WNP_RATING_SYSTEM_LIKE = _wnp.WNP_RATING_SYSTEM_LIKE
WNP_RATING_SYSTEM_LIKE_DISLIKE = _wnp.WNP_RATING_SYSTEM_LIKE_DISLIKE
WNP_RATING_SYSTEM_SCALE = _wnp.WNP_RATING_SYSTEM_SCALE
WNP_EVENT_PENDING = _wnp.WNP_EVENT_PENDING
WNP_EVENT_SUCCEEDED = _wnp.WNP_EVENT_SUCCEEDED
WNP_EVENT_FAILED = _wnp.WNP_EVENT_FAILED
WNP_STR_LEN = _wnp.WNP_STR_LEN
class wnp_player(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_wnp.wnp_player_id_get, _wnp.wnp_player_id_set)
    name = property(_wnp.wnp_player_name_get, _wnp.wnp_player_name_set)
    title = property(_wnp.wnp_player_title_get, _wnp.wnp_player_title_set)
    artist = property(_wnp.wnp_player_artist_get, _wnp.wnp_player_artist_set)
    album = property(_wnp.wnp_player_album_get, _wnp.wnp_player_album_set)
    cover = property(_wnp.wnp_player_cover_get, _wnp.wnp_player_cover_set)
    cover_src = property(_wnp.wnp_player_cover_src_get, _wnp.wnp_player_cover_src_set)
    state = property(_wnp.wnp_player_state_get, _wnp.wnp_player_state_set)
    position = property(_wnp.wnp_player_position_get, _wnp.wnp_player_position_set)
    duration = property(_wnp.wnp_player_duration_get, _wnp.wnp_player_duration_set)
    volume = property(_wnp.wnp_player_volume_get, _wnp.wnp_player_volume_set)
    rating = property(_wnp.wnp_player_rating_get, _wnp.wnp_player_rating_set)
    repeat = property(_wnp.wnp_player_repeat_get, _wnp.wnp_player_repeat_set)
    shuffle = property(_wnp.wnp_player_shuffle_get, _wnp.wnp_player_shuffle_set)
    rating_system = property(_wnp.wnp_player_rating_system_get, _wnp.wnp_player_rating_system_set)
    available_repeat = property(_wnp.wnp_player_available_repeat_get, _wnp.wnp_player_available_repeat_set)
    can_set_state = property(_wnp.wnp_player_can_set_state_get, _wnp.wnp_player_can_set_state_set)
    can_skip_previous = property(_wnp.wnp_player_can_skip_previous_get, _wnp.wnp_player_can_skip_previous_set)
    can_skip_next = property(_wnp.wnp_player_can_skip_next_get, _wnp.wnp_player_can_skip_next_set)
    can_set_position = property(_wnp.wnp_player_can_set_position_get, _wnp.wnp_player_can_set_position_set)
    can_set_volume = property(_wnp.wnp_player_can_set_volume_get, _wnp.wnp_player_can_set_volume_set)
    can_set_rating = property(_wnp.wnp_player_can_set_rating_get, _wnp.wnp_player_can_set_rating_set)
    can_set_repeat = property(_wnp.wnp_player_can_set_repeat_get, _wnp.wnp_player_can_set_repeat_set)
    can_set_shuffle = property(_wnp.wnp_player_can_set_shuffle_get, _wnp.wnp_player_can_set_shuffle_set)
    created_at = property(_wnp.wnp_player_created_at_get, _wnp.wnp_player_created_at_set)
    updated_at = property(_wnp.wnp_player_updated_at_get, _wnp.wnp_player_updated_at_set)
    active_at = property(_wnp.wnp_player_active_at_get, _wnp.wnp_player_active_at_set)
    is_desktop_player = property(_wnp.wnp_player_is_desktop_player_get, _wnp.wnp_player_is_desktop_player_set)
    _data = property(_wnp.wnp_player__data_get, _wnp.wnp_player__data_set)

    def __init__(self):
        _wnp.wnp_player_swiginit(self, _wnp.new_wnp_player())
    __swig_destroy__ = _wnp.delete_wnp_player

# Register wnp_player in _wnp:
_wnp.wnp_player_swigregister(wnp_player)
class wnp_events(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    on_player_added = property(_wnp.wnp_events_on_player_added_get, _wnp.wnp_events_on_player_added_set)
    on_player_updated = property(_wnp.wnp_events_on_player_updated_get, _wnp.wnp_events_on_player_updated_set)
    on_player_removed = property(_wnp.wnp_events_on_player_removed_get, _wnp.wnp_events_on_player_removed_set)
    on_active_player_changed = property(_wnp.wnp_events_on_active_player_changed_get, _wnp.wnp_events_on_active_player_changed_set)

    def __init__(self):
        _wnp.wnp_events_swiginit(self, _wnp.new_wnp_events())
    __swig_destroy__ = _wnp.delete_wnp_events

# Register wnp_events in _wnp:
_wnp.wnp_events_swigregister(wnp_events)

def wnp_start(port, adapter_version, events):
    return _wnp.wnp_start(port, adapter_version, events)

def wnp_stop():
    return _wnp.wnp_stop()

def wnp_is_started():
    return _wnp.wnp_is_started()

def wnp_lock(player):
    return _wnp.wnp_lock(player)

def wnp_unlock(player):
    return _wnp.wnp_unlock(player)

def wnp_get_player(id, always_return_player):
    return _wnp.wnp_get_player(id, always_return_player)

def wnp_get_active_player(always_return_player):
    return _wnp.wnp_get_active_player(always_return_player)

def wnp_get_all_players(players):
    return _wnp.wnp_get_all_players(players)

def wnp_get_event_result(event_id):
    return _wnp.wnp_get_event_result(event_id)

def wnp_wait_for_event_result(event_id):
    return _wnp.wnp_wait_for_event_result(event_id)

def wnp_get_position_percent(player):
    return _wnp.wnp_get_position_percent(player)

def wnp_get_remaining_seconds(player):
    return _wnp.wnp_get_remaining_seconds(player)

def wnp_format_seconds(seconds, pad_with_zeroes, out_str):
    return _wnp.wnp_format_seconds(seconds, pad_with_zeroes, out_str)

def wnp_try_set_state(player, state):
    return _wnp.wnp_try_set_state(player, state)

def wnp_try_skip_previous(player):
    return _wnp.wnp_try_skip_previous(player)

def wnp_try_skip_next(player):
    return _wnp.wnp_try_skip_next(player)

def wnp_try_set_position(player, seconds):
    return _wnp.wnp_try_set_position(player, seconds)

def wnp_try_set_volume(player, volume):
    return _wnp.wnp_try_set_volume(player, volume)

def wnp_try_set_rating(player, rating):
    return _wnp.wnp_try_set_rating(player, rating)

def wnp_try_set_repeat(player, repeat):
    return _wnp.wnp_try_set_repeat(player, repeat)

def wnp_try_set_shuffle(player, shuffle):
    return _wnp.wnp_try_set_shuffle(player, shuffle)

def wnp_try_play_pause(player):
    return _wnp.wnp_try_play_pause(player)

def wnp_try_revert(player, seconds):
    return _wnp.wnp_try_revert(player, seconds)

def wnp_try_forward(player, seconds):
    return _wnp.wnp_try_forward(player, seconds)

def wnp_try_set_position_percent(player, percent):
    return _wnp.wnp_try_set_position_percent(player, percent)

def wnp_try_revert_percent(player, percent):
    return _wnp.wnp_try_revert_percent(player, percent)

def wnp_try_forward_percent(player, percent):
    return _wnp.wnp_try_forward_percent(player, percent)

def wnp_try_toggle_repeat(player):
    return _wnp.wnp_try_toggle_repeat(player)

